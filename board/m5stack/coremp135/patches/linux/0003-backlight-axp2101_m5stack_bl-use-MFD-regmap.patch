From 7c9174cf50040d190aab04f7922985a7fd9fb2b5 Mon Sep 17 00:00:00 2001
From: MeemeeLab <57629983+MeemeeLab@users.noreply.github.com>
Date: Thu, 20 Jun 2024 07:56:48 +0900
Subject: [PATCH 3/5] backlight: axp2101_m5stack_bl: use MFD regmap

---
 drivers/video/backlight/Kconfig              |  3 +-
 drivers/video/backlight/axp2101_m5stack_bl.c | 99 ++++++++------------
 2 files changed, 39 insertions(+), 63 deletions(-)

diff --git a/drivers/video/backlight/Kconfig b/drivers/video/backlight/Kconfig
index 36a34e7d4692..de81724c4cfd 100644
--- a/drivers/video/backlight/Kconfig
+++ b/drivers/video/backlight/Kconfig
@@ -164,8 +164,9 @@ config BACKLIGHT_ATMEL_LCDC
 	  in unless the board's description says it's wired that way.
 
 config BACKLIGHT_AXP2101_M5STACK
-	tristate "M5Stack AXP2101 Backlight Driver"
+	bool "M5Stack AXP2101 Backlight Driver"
 	depends on I2C
+	select MFD_SIMPLE_MFD_I2C
 	help
 	  Enables support for backlights connected to DLDO1 of AXP2101.
 	  If your device is made by M5Stack, say Y.
diff --git a/drivers/video/backlight/axp2101_m5stack_bl.c b/drivers/video/backlight/axp2101_m5stack_bl.c
index 6b292756050c..85d019a19cc2 100644
--- a/drivers/video/backlight/axp2101_m5stack_bl.c
+++ b/drivers/video/backlight/axp2101_m5stack_bl.c
@@ -7,8 +7,9 @@
 #include <linux/module.h>
 #include <linux/init.h>
 #include <linux/errno.h>
-#include <linux/i2c.h>
 #include <linux/backlight.h>
+#include <linux/platform_device.h>
+#include <linux/regmap.h>
 
 #define AXP2101_MAX_BACKLIGHT_REG 28 // 3.3v, (3.3v - 0.5) / 0.1 = 28
 
@@ -16,48 +17,20 @@
 #define AXP2101_REG_DLDO1_CFG 0x99
 
 struct axp2101_bl {
-	struct i2c_client *client;
+	struct device *dev;
+	struct regmap *regmap;
 };
 
-static int axp2101_i2c_read(struct i2c_client *client, u8 reg, u8 *val)
-{
-	int ret;
-
-	ret = i2c_smbus_read_byte_data(client, reg);
-	if (ret < 0) {
-		dev_err(&client->dev,
-			"read fail: reg=%u ret=%d\n",
-			reg, ret);
-		return ret;
-	}
-
-	*val = ret;
-	return 0;
-}
-
-static int axp2101_i2c_write(struct i2c_client *client, u8 reg, u8 val)
-{
-	int ret = i2c_smbus_write_byte_data(client, reg, val);
-
-	if (ret) {
-		dev_err(&client->dev,
-			"write fail: reg=%u ret=%d\n",
-			reg, ret);
-	}
-
-	return ret;
-}
-
 static int axp2101_bl_set(struct backlight_device *bl, int brightness)
 {
 	struct axp2101_bl *data = bl_get_data(bl);
-	struct i2c_client *client = data->client;
+	struct regmap *regmap = data->regmap;
 	int ret;
-	u8 ldo_en_cfg0;
+	unsigned int ldo_en_cfg0;
 	u8 updated_ldo_en_cfg0;
 	u8 dldo1_cfg;
 
-	dev_dbg(&client->dev,
+	dev_dbg(data->dev,
 		"brightness=%d, power=%d, fb_blank=%d",
 		brightness, bl->props.power, bl->props.fb_blank);
 
@@ -65,18 +38,18 @@ static int axp2101_bl_set(struct backlight_device *bl, int brightness)
 		brightness = 0;
 	}
 
-	ret = axp2101_i2c_read(client, AXP2101_REG_LDO_EN_CFG0, &ldo_en_cfg0);
+	ret = regmap_read(regmap, AXP2101_REG_LDO_EN_CFG0, &ldo_en_cfg0);
 	if (ret < 0)
 		return ret;
 
 	if (brightness == 0) {
-		updated_ldo_en_cfg0 = ldo_en_cfg0 & 0x7f; // dldo1_en (dldo1 enable) = 0
+		updated_ldo_en_cfg0 = ((u8)ldo_en_cfg0) & 0x7f; // dldo1_en (dldo1 enable) = 0
 	} else {
-		updated_ldo_en_cfg0 = ldo_en_cfg0 | 0x80; // dldo1_en = 1
+		updated_ldo_en_cfg0 = ((u8)ldo_en_cfg0) | 0x80; // dldo1_en = 1
 	}
 
 	if (updated_ldo_en_cfg0 != ldo_en_cfg0) {
-		axp2101_i2c_write(client, AXP2101_REG_LDO_EN_CFG0, updated_ldo_en_cfg0);
+		regmap_write(regmap, AXP2101_REG_LDO_EN_CFG0, updated_ldo_en_cfg0);
 	}
 
 	if (brightness == 0) {
@@ -88,7 +61,7 @@ static int axp2101_bl_set(struct backlight_device *bl, int brightness)
 		dldo1_cfg = AXP2101_MAX_BACKLIGHT_REG;
 	}
 
-	axp2101_i2c_write(client, AXP2101_REG_DLDO1_CFG, dldo1_cfg);
+	regmap_write(regmap, AXP2101_REG_DLDO1_CFG, dldo1_cfg);
 
 	return 0;
 }
@@ -102,54 +75,56 @@ static const struct backlight_ops axp2101_bl_ops = {
 	.update_status	= axp2101_bl_update_status,
 };
 
-static int axp2101_probe(struct i2c_client *client, const struct i2c_device_id *id) {
+static int axp2101_probe(struct platform_device *pdev) {
 	struct backlight_properties props;
-	struct axp2101_bl *data;
+	struct axp2101_bl *axp2101;
 	struct backlight_device *bl;
 
-	data = devm_kzalloc(&client->dev, sizeof(*data), GFP_KERNEL);
-	if (data == NULL)
+	if (!pdev->dev.parent) {
+		dev_err(&pdev->dev, "No parent found!");
+		return -ENODEV;
+	}
+
+	axp2101 = devm_kzalloc(&pdev->dev, sizeof(*axp2101), GFP_KERNEL);
+	if (axp2101 == NULL)
 		return -ENOMEM;
 
-	data->client = client;
+	axp2101->dev = &pdev->dev;
+	axp2101->regmap = dev_get_regmap(pdev->dev.parent, NULL);
+	if (!axp2101->regmap) {
+		dev_err(&pdev->dev, "No regmap found!");
+		return -ENODEV;
+	}
 
 	memset(&props, 0, sizeof(props));
 	props.type = BACKLIGHT_RAW;
 	props.max_brightness = 100;
 	props.brightness = 100;
 
-	bl = devm_backlight_device_register(&client->dev,
-				dev_driver_string(&client->dev),
-				&client->dev, data, &axp2101_bl_ops, &props);
+	bl = devm_backlight_device_register(&pdev->dev,
+				dev_driver_string(&pdev->dev),
+				&pdev->dev, axp2101, &axp2101_bl_ops, &props);
 	if (IS_ERR(bl)) {
-		dev_err(&client->dev, "failed to register backlight\n");
+		dev_err(&pdev->dev, "failed to register backlight\n");
 		return PTR_ERR(bl);
 	}
 
 	return axp2101_bl_set(bl, props.brightness);
 }
 
-static const struct i2c_device_id axp2101_id[] = {
-	{ "axp2101-m5stack", 0 },
+static const struct platform_device_id axp2101_id[] = {
+	{ "axp2101-backlight", 0 },
 	{ }
 };
-MODULE_DEVICE_TABLE(i2c, axp2101_id);
+MODULE_DEVICE_TABLE(platform, axp2101_id);
 
 static const struct of_device_id axp2101_of_match[] = {
-	/*
-	 * AXP2101 isn't made by m5stack, but using what voltage and LDO is
-	 * up to backlight hardware and vendor decision.
-	 * We temporary made this "m5stack,axp2101" because this driver only
-	 * supports 3.3v DLDO1 connected backlights.
-	 *
-	 * TODO: make this driver not only to M5Stack devices
-	 */
-        { .compatible = "m5stack,axp2101" },
+        { .compatible = "m5stack,axp2101-backlight" },
         { },
 };
 MODULE_DEVICE_TABLE(of, axp2101_of_match);
 
-static struct i2c_driver axp2101_driver = {
+static struct platform_driver axp2101_driver = {
 	.driver = {
 		.name	= KBUILD_MODNAME,
 		.of_match_table = of_match_ptr(axp2101_of_match),
@@ -158,7 +133,7 @@ static struct i2c_driver axp2101_driver = {
 	.id_table = axp2101_id,
 };
 
-module_i2c_driver(axp2101_driver);
+module_platform_driver(axp2101_driver);
 
 MODULE_LICENSE("GPL v2");
 MODULE_AUTHOR("MeemeeLab");
-- 
2.45.2

