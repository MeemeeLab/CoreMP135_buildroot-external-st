// SPDX-License-Identifier: (GPL-2.0+ OR BSD-3-Clause)
/*
 * Copyright (C) STMicroelectronics 2021 - All Rights Reserved
 * Author: Alexandre Torgue <alexandre.torgue@foss.st.com> for STMicroelectronics.
 */

/dts-v1/;

#include <dt-bindings/gpio/gpio.h>
#include <dt-bindings/input/input.h>
#include <dt-bindings/leds/common.h>
#include <dt-bindings/regulator/st,stm32mp13-regulator.h>
#include <dt-bindings/rtc/rtc-stm32.h>
#include "stm32mp135.dtsi"
#include "stm32mp13xf.dtsi"
#include "stm32mp13-pinctrl.dtsi"

/ {
	model = "STMicroelectronics STM32MP135F-DK Discovery Board";
	compatible = "st,stm32mp135f-dk", "st,stm32mp135";

	aliases {
		ethernet0 = &eth1;
		ethernet1 = &eth2;
		serial0 = &usart6;
		serial1 = &usart1;
		serial2 = &uart8;
		serial3 = &usart2;

		i2c0 = &i2c3;
		spi1 = &spi1;
	};

	chosen {
		stdout-path = "serial0:115200n8";
		#address-cells = <1>;
		#size-cells = <1>;
		ranges;

		framebuffer {
			compatible = "simple-framebuffer";
			clocks = <&rcc LTDC_PX>;
			status = "okay";
		};
	};

	clocks {
	};

	memory@c0000000 {
		device_type = "memory";
		reg = <0xc0000000 0x20000000>;
	};

	reserved-memory {
		#address-cells = <1>;
		#size-cells = <1>;
		ranges;

		optee@dd000000 {
			reg = <0xdd000000 0x3000000>;
			no-map;
		};
	};

	v3v3_ao: v3v3-ao {
		compatible = "regulator-fixed";
		regulator-name = "v3v3_ao";
		regulator-min-microvolt = <3300000>;
		regulator-max-microvolt = <3300000>;
		regulator-always-on;
	};
};

&iwdg2 {
	timeout-sec = <32>;
	status = "okay";
};

&crc1 {
	status = "okay";
};

&cryp {
	status = "okay";
};

&dts {
	status = "okay";
};

&eth1 {
	status = "okay";
	pinctrl-0 = <&eth1_pins_mx>;
	pinctrl-1 = <&eth1_sleep_pins_mx>;
	pinctrl-names = "default", "sleep";
	phy-mode = "rgmii-id";
	max-speed = <100>;
	phy-handle = <&phy0_eth1>;
	nvmem-cells = <&ethernet_mac1_address>;
	nvmem-cell-names = "mac-address";

	mdio1 {
		#address-cells = <1>;
		#size-cells = <0>;
		compatible = "snps,dwmac-mdio";

		phy0_eth1: ethernet-phy@0 {
			compatible = "ethernet-phy-id001c.c916";
			reg = <0>;
			reset-assert-us = <10000>;
			reset-deassert-us = <30000>;
			reset-gpios = <&gpioa 10 GPIO_ACTIVE_LOW>;
		};
	};
};

&eth2 {
	status = "okay";
	pinctrl-0 = <&eth2_pins_mx>;
	pinctrl-1 = <&eth2_sleep_pins_mx>;
	pinctrl-names = "default", "sleep";
	phy-mode = "rgmii-id";
	max-speed = <100>;
	phy-handle = <&phy0_eth2>;
	st,ext-phyclk;
	nvmem-cells = <&ethernet_mac2_address>;
	nvmem-cell-names = "mac-address";

	mdio1 {
		#address-cells = <1>;
		#size-cells = <0>;
		compatible = "snps,dwmac-mdio";
		phy0_eth2: ethernet-phy@0 {
			compatible = "ethernet-phy-id001c.c916";
			reg = <0>;
			reset-assert-us = <10000>;
			reset-deassert-us = <30000>;
			reset-gpios = <&gpioa 14 GPIO_ACTIVE_LOW>;
		};
	};
};


&i2c3 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&i2c3_pins_mx>;
	pinctrl-1 = <&i2c3_sleep_pins_mx>;
	// i2c-scl-rising-time-ns = <96>;
	// i2c-scl-falling-time-ns = <3>;
	clock-frequency = <1000000>;
	status = "okay";
	// status = "disabled";
	/* spare dmas for other usage */
	/delete-property/dmas;
	/delete-property/dma-names;
};

&rtc {
	status = "disabled";
};

&scmi_regu {
	scmi_vddcpu: voltd-vddcpu {
		reg = <VOLTD_SCMI_STPMIC1_BUCK1>;
		regulator-name = "vddcpu";
	};
	scmi_vdd: voltd-vdd {
		reg = <VOLTD_SCMI_STPMIC1_BUCK3>;
		regulator-name = "vdd";
	};
	scmi_vddcore: voltd-vddcore {
		reg = <VOLTD_SCMI_STPMIC1_BUCK4>;
		regulator-name = "vddcore";
	};
	scmi_vdd_adc: voltd-vdd-adc {
		reg = <VOLTD_SCMI_STPMIC1_LDO1>;
		regulator-name = "vdd_adc";
	};
	scmi_vdd_usb: voltd-vdd-usb {
		reg = <VOLTD_SCMI_STPMIC1_LDO4>;
		regulator-name = "vdd_usb";
	};
	scmi_vdd_sd: voltd-vdd-sd {
		reg = <VOLTD_SCMI_STPMIC1_LDO5>;
		regulator-name = "vdd_sd";
	};
	scmi_v1v8_periph: voltd-v1v8-periph {
		reg = <VOLTD_SCMI_STPMIC1_LDO6>;
		regulator-name = "v1v8_periph";
	};
	scmi_v3v3_sw: voltd-v3v3-sw {
		reg = <VOLTD_SCMI_STPMIC1_PWR_SW2>;
		regulator-name = "v3v3_sw";
	};
};

&sdmmc1 {
	pinctrl-names = "default", "opendrain", "sleep";
	pinctrl-0 = <&sdmmc1_b4_pins_a &sdmmc1_clk_pins_a>;
	pinctrl-1 = <&sdmmc1_b4_od_pins_a &sdmmc1_clk_pins_a>;
	pinctrl-2 = <&sdmmc1_b4_sleep_pins_a>;
	disable-wp;
	st,neg-edge;
	bus-width = <4>;
	vmmc-supply = <&scmi_vdd_sd>;
	status = "okay";
};

/* Wifi */
// &sdmmc2 {
// 	pinctrl-names = "default", "opendrain", "sleep";
// 	pinctrl-0 = <&sdmmc2_b4_pins_a &sdmmc2_clk_pins_a>;
// 	pinctrl-1 = <&sdmmc2_b4_od_pins_a &sdmmc2_clk_pins_a>;
// 	pinctrl-2 = <&sdmmc2_b4_sleep_pins_a>;
// 	non-removable;
// 	st,neg-edge;
// 	bus-width = <4>;
// 	vmmc-supply = <&v3v3_ao>;
// 	mmc-pwrseq = <&wifi_pwrseq>;
// 	#address-cells = <1>;
// 	#size-cells = <0>;
// 	status = "disabled";

// };

&spi1 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&spi1_pins_mx>;
	pinctrl-1 = <&spi1_sleep_pins_mx>;
	num-cs = <1>;
	cs-gpios = <&gpioh 5 GPIO_ACTIVE_HIGH>;
	status = "okay";
};

&spi5 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&spi5_pins_a>;
	pinctrl-1 = <&spi5_sleep_pins_a>;
	status = "disabled";
};

&uart8 {
	pinctrl-names = "default", "sleep", "idle";
	pinctrl-0 = <&uart8_pins_a>;
	pinctrl-1 = <&uart8_sleep_pins_a>;
	pinctrl-2 = <&uart8_idle_pins_a>;
	/delete-property/dmas;
	/delete-property/dma-names;
	status = "disabled";
};

&usart6 {
	pinctrl-names = "default", "sleep", "idle";
	pinctrl-0 = <&usart6_pins_mx>;
	pinctrl-1 = <&usart6_sleep_pins_mx>;
	pinctrl-2 = <&usart6_idle_pins_mx>;
	/delete-property/dmas;
	/delete-property/dma-names;
	rx-tx-swap;
	status = "okay";

	u-boot,dm-pre-reloc;
};

&usbh_ehci {
	phys = <&usbphyc_port0>;
	status = "okay";
	#address-cells = <1>;
	#size-cells = <0>;
};

&usbotg_hs {
	phys = <&usbphyc_port1 0>;
	phy-names = "usb2-phy";
	u-boot,force-b-session-valid;
	hnp-srp-disable;
	status = "okay";
};

&usbphyc {
	status = "okay";
};

&usbphyc_port0 {
	phy-supply = <&scmi_vdd_usb>;
	st,current-boost-microamp = <1000>;
	st,decrease-hs-slew-rate;
	st,tune-hs-dc-level = <2>;
	st,enable-hs-rftime-reduction;
	st,trim-hs-current = <11>;
	st,trim-hs-impedance = <2>;
	st,tune-squelch-level = <1>;
	st,enable-hs-rx-gain-eq;
	st,no-hs-ftime-ctrl;
	st,no-lsfs-sc;

	/*
	 * Hack to keep hub active if wakeup source is enabled
	 * otherwise the hub will wakeup the port0 as soon as the v3v3_sw is disabled
	 */
	connector {
		compatible = "usb-a-connector";
		vbus-supply = <&scmi_v3v3_sw>;
	};
};

&usbphyc_port1 {
	phy-supply = <&scmi_vdd_usb>;
	st,current-boost-microamp = <1000>;
	st,decrease-hs-slew-rate;
	st,tune-hs-dc-level = <2>;
	st,enable-hs-rftime-reduction;
	st,trim-hs-current = <11>;
	st,trim-hs-impedance = <2>;
	st,tune-squelch-level = <1>;
	st,enable-hs-rx-gain-eq;
	st,no-hs-ftime-ctrl;
	st,no-lsfs-sc;
};


&pinctrl {
	eth1_pins_mx: eth1_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('A', 2, AF11)>; /* ETH1_MDIO */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('A', 7, AF11)>, /* ETH1_RX_CTL */
					 <STM32_PINMUX('B', 0, AF11)>, /* ETH1_RXD2 */
					 <STM32_PINMUX('B', 1, AF11)>, /* ETH1_RXD3 */
					 <STM32_PINMUX('C', 4, AF11)>, /* ETH1_RXD0 */
					 <STM32_PINMUX('C', 5, AF11)>, /* ETH1_RXD1 */
					 <STM32_PINMUX('D', 7, AF10)>; /* ETH1_RX_CLK */
			bias-disable;
		};
		pins3 {
			pinmux = <STM32_PINMUX('B', 11, AF11)>, /* ETH1_TX_CTL */
					 <STM32_PINMUX('C', 1, AF11)>, /* ETH1_GTX_CLK */
					 <STM32_PINMUX('C', 2, AF11)>, /* ETH1_TXD2 */
					 <STM32_PINMUX('E', 5, AF10)>, /* ETH1_TXD3 */
					 <STM32_PINMUX('G', 2, AF11)>, /* ETH1_MDC */
					 <STM32_PINMUX('F', 12, AF11)>, /* ETH1_CLK125 */
					 <STM32_PINMUX('G', 13, AF11)>, /* ETH1_TXD0 */
					 <STM32_PINMUX('G', 14, AF11)>; /* ETH1_TXD1 */
			bias-disable;
			drive-push-pull;
			slew-rate = <2>;
		};
	};

	eth1_sleep_pins_mx: eth1_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 2, ANALOG)>, /* ETH1_MDIO */
					 <STM32_PINMUX('A', 7, ANALOG)>, /* ETH1_RX_CTL */
					 <STM32_PINMUX('B', 0, ANALOG)>, /* ETH1_RXD2 */
					 <STM32_PINMUX('B', 1, ANALOG)>, /* ETH1_RXD3 */
					 <STM32_PINMUX('B', 11, ANALOG)>, /* ETH1_TX_CTL */
					 <STM32_PINMUX('C', 1, ANALOG)>, /* ETH1_GTX_CLK */
					 <STM32_PINMUX('C', 2, ANALOG)>, /* ETH1_TXD2 */
					 <STM32_PINMUX('C', 4, ANALOG)>, /* ETH1_RXD0 */
					 <STM32_PINMUX('C', 5, ANALOG)>, /* ETH1_RXD1 */
					 <STM32_PINMUX('D', 7, ANALOG)>, /* ETH1_RX_CLK */
					 <STM32_PINMUX('E', 5, ANALOG)>, /* ETH1_TXD3 */
					 <STM32_PINMUX('G', 2, ANALOG)>, /* ETH1_MDC */
					 <STM32_PINMUX('F', 12, ANALOG)>, /* ETH1_CLK125 */
					 <STM32_PINMUX('G', 13, ANALOG)>, /* ETH1_TXD0 */
					 <STM32_PINMUX('G', 14, ANALOG)>; /* ETH1_TXD1 */
		};
	};

	eth2_pins_mx: eth2_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('A', 8, AF11)>, /* ETH2_RXD3 */
					 <STM32_PINMUX('E', 2, AF10)>, /* ETH2_RXD1 */
					 <STM32_PINMUX('F', 4, AF11)>, /* ETH2_RXD0 */
					 <STM32_PINMUX('G', 12, AF12)>, /* ETH2_RX_CTL */
					 <STM32_PINMUX('H', 6, AF12)>, /* ETH2_RXD2 */
					 <STM32_PINMUX('H', 11, AF11)>; /* ETH2_RX_CLK */
			bias-disable;
		};
		pins2 {
			pinmux = <STM32_PINMUX('B', 2, AF11)>; /* ETH2_MDIO */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
		pins3 {
			pinmux = <STM32_PINMUX('E', 6, AF11)>, /* ETH2_TXD3 */
					 <STM32_PINMUX('F', 6, AF11)>, /* ETH2_TX_CTL */
					 <STM32_PINMUX('F', 7, AF11)>, /* ETH2_TXD0 */
					 <STM32_PINMUX('G', 1, AF10)>, /* ETH2_TXD2 */
					 <STM32_PINMUX('G', 3, AF10)>, /* ETH2_GTX_CLK */
					 <STM32_PINMUX('G', 5, AF10)>, /* ETH2_MDC */
					 <STM32_PINMUX('G', 11, AF10)>, /* ETH2_TXD1 */
					 <STM32_PINMUX('H', 2, AF13)>; /* ETH2_CLK125 */
			bias-disable;
			drive-push-pull;
			slew-rate = <2>;
		};
	};

	eth2_sleep_pins_mx: eth2_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 8, ANALOG)>, /* ETH2_RXD3 */
					 <STM32_PINMUX('B', 2, ANALOG)>, /* ETH2_MDIO */
					 <STM32_PINMUX('E', 2, ANALOG)>, /* ETH2_RXD1 */
					 <STM32_PINMUX('E', 6, ANALOG)>, /* ETH2_TXD3 */
					 <STM32_PINMUX('F', 4, ANALOG)>, /* ETH2_RXD0 */
					 <STM32_PINMUX('F', 6, ANALOG)>, /* ETH2_TX_CTL */
					 <STM32_PINMUX('F', 7, ANALOG)>, /* ETH2_TXD0 */
					 <STM32_PINMUX('G', 1, ANALOG)>, /* ETH2_TXD2 */
					 <STM32_PINMUX('G', 3, ANALOG)>, /* ETH2_GTX_CLK */
					 <STM32_PINMUX('G', 5, ANALOG)>, /* ETH2_MDC */
					 <STM32_PINMUX('H', 2, ANALOG)>, /* ETH2_CLK125 */
					 <STM32_PINMUX('G', 11, ANALOG)>, /* ETH2_TXD1 */
					 <STM32_PINMUX('G', 12, ANALOG)>, /* ETH2_RX_CTL */
					 <STM32_PINMUX('H', 6, ANALOG)>, /* ETH2_RXD2 */
					 <STM32_PINMUX('H', 11, ANALOG)>; /* ETH2_RX_CLK */
		};
	};
	
	usart6_pins_mx: usart6_mx-0 {
		u-boot,dm-pre-reloc;
		pins1 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('C', 6, AF7)>; /* USART6_TX */
			bias-pull-up;
		};
		pins2 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('C', 7, AF7)>; /* USART6_RX */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	usart6_sleep_pins_mx: usart6_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('C', 6, ANALOG)>, /* USART6_TX */
					 <STM32_PINMUX('C', 7, ANALOG)>; /* USART6_RX */
		};
	};

	usart6_idle_pins_mx: usart6-idle_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('C', 6, ANALOG)>; /* USART6_TX */
		};
		pins2 {
			pinmux = <STM32_PINMUX('C', 7, AF7)>; /* USART6_RX */
			bias-pull-up;
		};
	};


	i2c3_pins_mx: i2c3_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('H', 7, AF5)>, /* I2C3_SDA */
					 <STM32_PINMUX('H', 12, AF4)>; /* I2C3_SCL */
			bias-disable;
			drive-open-drain;
			slew-rate = <0>;
		};
	};

	i2c3_sleep_pins_mx: i2c3_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('H', 7, ANALOG)>, /* I2C3_SDA */
					 <STM32_PINMUX('H', 12, ANALOG)>; /* I2C3_SCL */
		};
	};

	ltdc_pins_mx: ltdc_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('A', 12, AF14)>, /* LTDC_G6 */
					 <STM32_PINMUX('A', 15, AF11)>, /* LTDC_G7 */
					 <STM32_PINMUX('B', 3, AF14)>, /* LTDC_B2 */
					 <STM32_PINMUX('B', 5, AF13)>, /* LTDC_B6 */
					 <STM32_PINMUX('B', 6, AF14)>, /* LTDC_B7 */
					 <STM32_PINMUX('B', 9, AF14)>, /* LTDC_B1 */
					 <STM32_PINMUX('B', 12, AF13)>, /* LTDC_R3 */
					 <STM32_PINMUX('B', 14, AF13)>, /* LTDC_R0 */
					 <STM32_PINMUX('D', 1, AF14)>, /* LTDC_G2 */
					 <STM32_PINMUX('D', 4, AF11)>, /* LTDC_R1 */
					 <STM32_PINMUX('D', 5, AF13)>, /* LTDC_B0 */
					 <STM32_PINMUX('D', 9, AF11)>, /* LTDC_B5 */
					 <STM32_PINMUX('D', 10, AF9)>, /* LTDC_G5 */
					 <STM32_PINMUX('D', 13, AF14)>, /* LTDC_G4 */
					 <STM32_PINMUX('E', 1, AF11)>, /* LTDC_R4 */
					 <STM32_PINMUX('E', 7, AF14)>, /* LTDC_R5 */
					 <STM32_PINMUX('E', 12, AF9)>, /* LTDC_VSYNC */
					 <STM32_PINMUX('F', 0, AF13)>, /* LTDC_R6 */
					 <STM32_PINMUX('F', 1, AF14)>, /* LTDC_G1 */
					 <STM32_PINMUX('F', 5, AF9)>, /* LTDC_G0 */
					 <STM32_PINMUX('G', 6, AF14)>, /* LTDC_R7 */
					 <STM32_PINMUX('G', 7, AF14)>, /* LTDC_R2 */
					 <STM32_PINMUX('G', 15, AF14)>, /* LTDC_B3 */
					 <STM32_PINMUX('H', 9, AF11)>, /* LTDC_DE */
					 <STM32_PINMUX('H', 10, AF13)>, /* LTDC_HSYNC */
					 <STM32_PINMUX('H', 13, AF13)>, /* LTDC_G3 */
					 <STM32_PINMUX('H', 14, AF11)>; /* LTDC_B4 */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('B', 15, AF13)>; /* LTDC_CLK */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
	};

	ltdc_sleep_pins_mx: ltdc_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 12, ANALOG)>, /* LTDC_G6 */
					 <STM32_PINMUX('A', 15, ANALOG)>, /* LTDC_G7 */
					 <STM32_PINMUX('B', 3, ANALOG)>, /* LTDC_B2 */
					 <STM32_PINMUX('B', 5, ANALOG)>, /* LTDC_B6 */
					 <STM32_PINMUX('B', 6, ANALOG)>, /* LTDC_B7 */
					 <STM32_PINMUX('B', 9, ANALOG)>, /* LTDC_B1 */
					 <STM32_PINMUX('B', 12, ANALOG)>, /* LTDC_R3 */
					 <STM32_PINMUX('B', 14, ANALOG)>, /* LTDC_R0 */
					 <STM32_PINMUX('B', 15, ANALOG)>, /* LTDC_CLK */
					 <STM32_PINMUX('D', 1, ANALOG)>, /* LTDC_G2 */
					 <STM32_PINMUX('D', 4, ANALOG)>, /* LTDC_R1 */
					 <STM32_PINMUX('D', 5, ANALOG)>, /* LTDC_B0 */
					 <STM32_PINMUX('D', 9, ANALOG)>, /* LTDC_B5 */
					 <STM32_PINMUX('D', 10, ANALOG)>, /* LTDC_G5 */
					 <STM32_PINMUX('D', 13, ANALOG)>, /* LTDC_G4 */
					 <STM32_PINMUX('E', 1, ANALOG)>, /* LTDC_R4 */
					 <STM32_PINMUX('E', 7, ANALOG)>, /* LTDC_R5 */
					 <STM32_PINMUX('E', 12, ANALOG)>, /* LTDC_VSYNC */
					 <STM32_PINMUX('F', 0, ANALOG)>, /* LTDC_R6 */
					 <STM32_PINMUX('F', 1, ANALOG)>, /* LTDC_G1 */
					 <STM32_PINMUX('F', 5, ANALOG)>, /* LTDC_G0 */
					 <STM32_PINMUX('G', 6, ANALOG)>, /* LTDC_R7 */
					 <STM32_PINMUX('G', 7, ANALOG)>, /* LTDC_R2 */
					 <STM32_PINMUX('G', 15, ANALOG)>, /* LTDC_B3 */
					 <STM32_PINMUX('H', 9, ANALOG)>, /* LTDC_DE */
					 <STM32_PINMUX('H', 10, ANALOG)>, /* LTDC_HSYNC */
					 <STM32_PINMUX('H', 13, ANALOG)>, /* LTDC_G3 */
					 <STM32_PINMUX('H', 14, ANALOG)>; /* LTDC_B4 */
		};
	};
	spi1_pins_mx: spi1_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('C', 0, AF6)>, /* SPI1_MOSI */
					 <STM32_PINMUX('C', 3, AF6)>; /* SPI1_SCK */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
	};

	spi1_sleep_pins_mx: spi1_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('C', 0, ANALOG)>, /* SPI1_MOSI */
					 <STM32_PINMUX('C', 3, ANALOG)>; /* SPI1_SCK */
		};
	};
};
